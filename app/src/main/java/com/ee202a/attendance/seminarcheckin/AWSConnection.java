package com.ee202a.attendance.seminarcheckin;

import android.bluetooth.BluetoothManager;
import android.content.Context;
import android.util.Log;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.CognitoCachingCredentialsProvider;
import com.amazonaws.mobileconnectors.iot.AWSIotMqttClientStatusCallback;
import com.amazonaws.mobileconnectors.iot.AWSIotMqttManager;
import com.amazonaws.mobileconnectors.iot.AWSIotMqttNewMessageCallback;
import com.amazonaws.mobileconnectors.iot.AWSIotMqttQos;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;

import org.json.JSONException;
import org.json.JSONObject;


import java.io.UnsupportedEncodingException;

/**
 * Created by boyang.
 */

public class AWSConnection{
    static final String LOG_TAG = AWSConnection.class.getCanonicalName();
//    AWSConnection currentConnection = this;

    // --- Constants to modify per your configuration ---

    // Customer specific IoT endpoint
    // AWS Iot CLI describe-endpoint call returns: XXXXXXXXXX.iot.<region>.amazonaws.com,
    private static final String CUSTOMER_SPECIFIC_ENDPOINT = "a11nf0pk1jaec3.iot.us-west-2.amazonaws.com";
    // Cognito pool ID. For this app, pool needs to be unauthenticated pool with
    // AWS IoT permissions.
    private static final String COGNITO_POOL_ID = "us-west-2:33d13306-6cd3-4492-b840-3aaf45e2869b";
    // Region of AWS IoT
    private static final Regions MY_REGION = Regions.US_WEST_2;

    private static AWSIotMqttManager mqttManager;

    private static AWSCredentials awsCredentials;
    private static CognitoCachingCredentialsProvider credentialsProvider;

    //These variable are given or generated by the Activity class
    private static MainActivity mainActivity = null;
//    private static OpenCvRecognizeActivity signInActivity = null;
    private static RegisterActivity signUpActivity = null;

    private static int studentID = -1;
    private static String clientId;


    static BluetoothManager bluetoothManager;
    static BeaconScanner beaconScanner = new BeaconScanner();

    protected static void setMainActivity(MainActivity inputActivity){
        mainActivity = inputActivity;
    }

//    protected static void setOpenCvRecognizeActivity(OpenCvRecognizeActivity inputActivity){
//        signInActivity = inputActivity;
//    }

    protected static void setRegisterActivity(RegisterActivity inputActivity){
        signUpActivity = inputActivity;
    }

    static void onCreateCall() {
        // MQTT client IDs are required to be unique per AWS IoT account.
        // This UUID is "practically unique" but does not _guarantee_
        // uniqueness.
        clientId = mainActivity.clientId;
        // Initialize the AWS Cognito credentials provider
        credentialsProvider = new CognitoCachingCredentialsProvider(
                mainActivity.getApplicationContext(), // context
                COGNITO_POOL_ID, // Identity Pool ID
                MY_REGION // Region
        );

        Region region = Region.getRegion(MY_REGION);

        // MQTT Client
        mqttManager = new AWSIotMqttManager(clientId, CUSTOMER_SPECIFIC_ENDPOINT);

        // The following block uses IAM user credentials for authentication with AWS IoT.
        //awsCredentials = new BasicAWSCredentials("ACCESS_KEY_CHANGE_ME", "SECRET_KEY_CHANGE_ME");
        //btnConnect.setEnabled(true);

        // The following block uses a Cognito credentials provider for authentication with AWS IoT.

        new Thread(new Runnable() {
            @Override
            public void run() {
                awsCredentials = credentialsProvider.getCredentials();

                mainActivity.runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        connectToServer();
                        mainActivity.setButtonEnable();

                    }
                });
            }
        }).start();
    }

    /**
     * check if the connection is lost and resume the connection if the connection is lost
     */
    public static void resumeConnection(){
        try {
            mqttManager.connect(credentialsProvider, new AWSIotMqttClientStatusCallback() {

                @Override
                public void onStatusChanged(final AWSIotMqttClientStatus status,
                                            final Throwable throwable) {
                    Log.d(LOG_TAG, "Status = " + String.valueOf(status));
                    if (status == AWSIotMqttClientStatus.Connected) {
                        if (studentID != -1) {
                            Log.d(LOG_TAG, "Resubscribe to subscribeRandomAttendance");
                            subscribeRandomAttendance(studentID);
                        }
                    }
                }
            });
        } catch (final Exception e) {
            Log.e(LOG_TAG, "Connection error.", e);
//            tvStatus.setText("Error! " + e.getMessage());
        }
    }
    public static void connectToServer() {
        Log.d(LOG_TAG, "clientId = " + clientId);

        try {
            mqttManager.connect(credentialsProvider, new AWSIotMqttClientStatusCallback() {
                @Override
                public void onStatusChanged(final AWSIotMqttClientStatus status,
                                            final Throwable throwable) {
                    Log.d(LOG_TAG, "Status = " + String.valueOf(status));
//                    activity.runOnUiThread(new Runnable() {
//                        @Override
//                        public void run() {
//                            if (status == AWSIotMqttClientStatus.Connecting) {
////                                activity.tvStatus.setText("Connecting...");
//                                Log.d(LOG_TAG, "Connecting...");
//
//                            } else if (status == AWSIotMqttClientStatus.Connected) {
////                                activity.tvStatus.setText("Connected");
//                                Log.d(LOG_TAG, "Connected");
//                                if(studentID != -1) {
//                                    subscribeRandomAttendance(studentID);
//                                }
//
//                            } else if (status == AWSIotMqttClientStatus.Reconnecting) {
//                                if (throwable != null) {
//                                    Log.e(LOG_TAG, "Connection error.", throwable);
//                                }
////                                activity.tvStatus.setText("Reconnecting");
//                                Log.d(LOG_TAG, "Reconnecting");
//                            } else if (status == AWSIotMqttClientStatus.ConnectionLost) {
//                                if (throwable != null) {
//                                    Log.e(LOG_TAG, "Connection error.", throwable);
//                                    throwable.printStackTrace();
//                                }
////                                activity.tvStatus.setText("Disconnected");
//                                Log.d(LOG_TAG, "Disconnected");
//                            } else {
////                                activity.tvStatus.setText("Disconnected");
//                                Log.d(LOG_TAG, "Disconnected");
//
//                            }
//                        }
//                    });
                }
            });
        } catch (final Exception e) {
            Log.e(LOG_TAG, "Connection error.", e);
//            tvStatus.setText("Error! " + e.getMessage());
        }
    }

    /**
     * sign up process for the front end
     *
     * @param studentID
     * @return
     */
    public static void signUp(final int studentID) {

        //first we need to subscribe the listening topic so we can catch the sign up response
        final String listenTopic = "PhoneSignUpRequestEcho";
        Log.d(LOG_TAG, "listenTopic = " + listenTopic);
        //myStudentID = studentID;
        try {
            mqttManager.subscribeToTopic(listenTopic, AWSIotMqttQos.QOS0,
                    new AWSIotMqttNewMessageCallback() {
                        @Override
                        public void onMessageArrived(final String topic, final byte[] data) {
                            try {
                                String message = new String(data, "UTF-8");
                                Log.d(LOG_TAG, "Message arrived:");
                                Log.d(LOG_TAG, "   Topic: " + topic);
                                Log.d(LOG_TAG, " Message: " + message);

                                JSONObject jsonMessage = new JSONObject(message);
                                if (jsonMessage.getInt("ID") == studentID) {
                                    //judge whether the sign up is successful
                                    boolean isSignUpSuccess = jsonMessage.getBoolean("result");
                                    Log.d(LOG_TAG, " IsSignUpSuccess: " + isSignUpSuccess);
                                    signUpActivity.isSignUp(isSignUpSuccess);
//                                   activity.tvLastMessage.setText(String.valueOf(isSignUpSuccess));
//                                    activity.tvLastMessage.setText((String) jsonMessage.get("message"));
                                }


                            } catch (UnsupportedEncodingException e) {
                                Log.e(LOG_TAG, "Message encoding error.", e);
                            } catch (JSONException e) {
                                Log.e(LOG_TAG, "JSON creating error.", e);
                            }
                        }
                    });
        } catch (Exception e) {
            Log.e(LOG_TAG, "Subscription error.", e);
        }


        //then we need to send the sign up request to the server
        final String sendTopic = "PhoneSignUpPoll";
        final String msg;
        JSONObject sendContent = new JSONObject();

        Log.d(LOG_TAG, "sendTopic = " + sendTopic);

        try {
            sendContent.put("ID", studentID);
            msg = sendContent.toString();
            mqttManager.publishString(msg, sendTopic, AWSIotMqttQos.QOS0);
        } catch (JSONException e) {
            Log.e(LOG_TAG, "JSON put error. ", e);
        } catch (IllegalArgumentException e) {
            Log.e(LOG_TAG, "Publish error.", e);
        }
//        return false;
    }

    public static void signIn(final int studentID, OpenCvRecognizeActivity incomingActivity) {
        //first we need to subscribe the listening topic so we can catch the sign in response
        final String listenTopic = "PhoneSignInRequestEcho";
        Log.d(LOG_TAG, "listenTopic = " + listenTopic);
        try {
            mqttManager.subscribeToTopic(listenTopic, AWSIotMqttQos.QOS0,
                    new AWSIotMqttNewMessageCallback() {
                        @Override
                        public void onMessageArrived(final String topic, final byte[] data) {
                            try {
                                String message = new String(data, "UTF-8");
                                Log.d(LOG_TAG, "Message arrived:");
                                Log.d(LOG_TAG, "   Topic: " + topic);
                                Log.d(LOG_TAG, " Message: " + message);

                                JSONObject jsonMessage = new JSONObject(message);
                                if ((int) jsonMessage.get("ID") == studentID) {

                                     // need to subscribe to the random attendance poll
                                    Log.d(LOG_TAG, "now we need to subscribe to random Attendance");
                                    subscribeRandomAttendance(studentID);
                                    new Thread(incomingActivity::loginResponse).start();
                                    Log.d(LOG_TAG, "out of signIn call");
//                                    activity.tvLastMessage.setText((String) jsonMessage.get("message"));
                                }

                            } catch (UnsupportedEncodingException e) {
                                Log.e(LOG_TAG, "Message encoding error.", e);
                            } catch (JSONException e) {
                                Log.e(LOG_TAG, "JSON creating error.", e);
                            }
                        }
                    });
        } catch (Exception e) {
            Log.e(LOG_TAG, "Subscription error.", e);
        }


        //then we need to send the sign in request to the server
        final String sendTopic = "PhoneSignInPoll";
        final String msg;
        JSONObject sendContent = new JSONObject();

        Log.d(LOG_TAG, "sendTopic = " + sendTopic);

        try {
            sendContent.put("ID", studentID);
            msg = sendContent.toString();
            mqttManager.publishString(msg, sendTopic, AWSIotMqttQos.QOS0);
        } catch (JSONException e) {
            Log.e(LOG_TAG, "JSON put error. ", e);
        } catch (IllegalArgumentException e) {
            Log.e(LOG_TAG, "Publish error.", e);
        }
//        return false;
    }

    /**
     * after sign in, we call this function to listen to the Attendance poll to catch the
     * attendance request
     * @param thisStudentID
     */
    private static void subscribeRandomAttendance(int thisStudentID){
        //now is the point where we finally confirm the studentID
        studentID = thisStudentID;
        final String randomAttendanceTopic = "callRPi";
        Log.d(LOG_TAG, "randomAttendanceTopic = " + randomAttendanceTopic);
        try {
            mqttManager.subscribeToTopic(randomAttendanceTopic, AWSIotMqttQos.QOS0,
                    new AWSIotMqttNewMessageCallback() {
                        @Override
                        public void onMessageArrived(final String topic, final byte[] data) {
                            try {
                                String message = new String(data, "UTF-8");
                                Log.d(LOG_TAG, "Message arrived:");
                                Log.d(LOG_TAG, "   Topic: " + topic);
                                Log.d(LOG_TAG, " Message: " + message);

                                JSONObject subscribeJson = new JSONObject(message);
//                                Log.d(LOG_TAG, " JsonMessage: " + subscribeJson.get("message"));
                                int [] incomingUUIDS = new int [5];
                                incomingUUIDS[0] = subscribeJson.getInt("UUID0");
                                incomingUUIDS[1] = subscribeJson.getInt("UUID1");
                                incomingUUIDS[2] = subscribeJson.getInt("UUID2");
                                incomingUUIDS[3] = subscribeJson.getInt("UUID3");
                                incomingUUIDS[4] = subscribeJson.getInt("Major_Minor");
                                /**
                                 * TODO: call the iBeacon here with JSONObject
                                 */
                                //scan for 30seconds
                                bluetoothManager = (BluetoothManager) mainActivity.getSystemService(Context.BLUETOOTH_SERVICE);
                                beaconScanner.startBeaconScan(bluetoothManager, incomingUUIDS, 30000);

                            } catch (UnsupportedEncodingException e) {
                                Log.e(LOG_TAG, "Message encoding error.", e);
                            } catch (JSONException e) {
                                Log.e(LOG_TAG, "JSON creating error.", e);
                            }
                        }
                    });
        } catch (Exception e) {
            Log.e(LOG_TAG, "Subscription error.", e);
        }
    }

    /**
     * This function is called by iBeacon to response to the server
     * whether it has a uuid match or not
     * @param uuid_match_res
     */
    public static void RandomAttendanceResponse(boolean uuid_match_res){
        final String attendanceResponseTopic = "TimeSlotResult";
        final String msg;
        JSONObject sendContent = new JSONObject();

        Log.d(LOG_TAG, "attendanceResponseTopic = " + attendanceResponseTopic);

        try {
            sendContent.put("ID", studentID);
            sendContent.put("uuid_match_res", uuid_match_res);
            msg = sendContent.toString();
            mqttManager.publishString(msg, attendanceResponseTopic, AWSIotMqttQos.QOS0);
            subscribeRandomAttendance(studentID);
        } catch (JSONException e) {
            Log.e(LOG_TAG, "JSON put error. ", e);
        } catch (IllegalArgumentException e) {
            Log.e(LOG_TAG, "Publish error.", e);
        }
    }
}
